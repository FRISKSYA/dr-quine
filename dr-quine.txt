# Dr_Quine

**概要**: このプロジェクトは、Kleeneの再帰定理を発見させることを目的としています！

**バージョン**: 3

---

## 目次

I. まえがき（2ページ）
II. 序論（3ページ）
III. 目的（4ページ）
IV. 一般的な指示（5ページ）
V. 必須部分（6ページ）
VI. ボーナス部分（10ページ）
VII. 提出と相互評価（11ページ）

---

## 第I章 まえがき

---

## 第II章 序論

クワインとは、出力とソースコードが同一であるコンピュータプログラム（一種のメタプログラム）です。チャレンジとして、または楽しみのために、一部のプログラマーは特定のプログラミング言語で最短のクワインを書こうとします。

単純にソースファイルを開いて表示する操作は、チート行為とみなされます。より一般的に、何らかのデータ入力を使用するプログラムは、有効なクワインとは考えられません。自明な解決策は、ソースコードが空のプログラムです。実際、そのようなプログラムの実行は、ほとんどの言語で出力を生成しません。つまり、プログラムのソースコードと同じです。

---

## 第III章 目的

このプロジェクトは、自己複製の原理とそれから派生する問題に直面することを促します。これは、特にマルウェアプロジェクトなど、より複雑なプロジェクトへの完璧な導入です。

好奇心旺盛な方には、不動点に関するすべてを調べることを強くお勧めします！

---

## 第IV章 一般的な指示

• このプロジェクトは人間のみによって採点されます。
• C/ASMを使用し、Makefileを提出する必要があります。
• Makefileはプロジェクトをコンパイルし、通常のルールを含む必要があります。必要な場合のみプログラムを再コンパイルおよび再リンクする必要があります。
• エラーを慎重に処理する必要があります。プログラムが予期しない方法で終了することは決してあってはなりません（セグメンテーション違反、バスエラー、二重フリーなど）。
• フォーラムやSlackで質問することができます...

---

## 第V章 必須部分

このプロジェクトでは、それぞれ異なる特性を持つ3つの異なるプログラムを再コーディングする必要があります。各プログラムはCとアセンブリでコーディングし、それぞれCとASMという名前のフォルダに配置し、各フォルダには通常のルールを含む独自のMakefileを含める必要があります。

C部分のみでこのプロジェクトを検証することができますが、この分野の次のすべてのプロジェクトのためにアセンブリ部分を実現することを強くお勧めします。

### 最初のプログラム

以下の機能を持つ必要があります：

• 実行可能ファイルの名前は**Colleen**でなければなりません。
• 実行すると、プログラムは標準出力に、プログラムのコンパイルに使用されたファイルのソースコードと同一の出力を表示する必要があります。
• ソースコードには最低限以下を含む必要があります：
  ◦ main関数
  ◦ 2つの異なるコメント
  ◦ コメントの1つはmain関数内に存在する必要があります
  ◦ コメントの1つはプログラムの外部に存在する必要があります
  ◦ main関数に加えて別の関数（もちろん呼び出されます）

例を参照してください：

```bash
$> ls -al
total 12
drwxr-xr-x 2 root root 4096 Feb 2 13:26 .
drwxr-xr-x 4 root root 4096 Feb 2 13:26 ..
-rw-r--r-- 1 root root 647 Feb 2 13:26 Colleen.c
$> clang -Wall -Wextra -Werror -o Colleen Colleen.c; ./Colleen > tmp_Colleen ; diff tmp_Colleen Colleen.c
$> _
```

### 2番目のプログラム

• 実行可能ファイルの名前は**Grace**でなければなりません。
• 実行すると、プログラムは**Grace_kid.c/Grace_kid.s**という名前のファイルに、プログラムのコンパイルに使用されたファイルのソースコードを書き込みます。
• ソースコードは厳密に以下を含む必要があります：
  ◦ 宣言されたmainはありません
  ◦ 3つのdefineのみ
  ◦ 1つのコメント
• プログラムはマクロを呼び出すことによって実行されます。

例を参照してください：

```bash
$> ls -al
total 12
drwxr-xr-x 2 root root 4096 Feb 2 13:30 .
drwxr-xr-x 4 root root 4096 Feb 2 13:29 ..
-rw-r--r-- 1 root root 362 Feb 2 13:30 Grace.c
$> clang -Wall -Wextra -Werror -o Grace Grace.c; ./Grace ; diff Grace.c Grace_kid.c
$> ls -al
total 24
drwxr-xr-x 2 root root 4096 Feb 2 13:30 .
drwxr-xr-x 4 root root 4096 Feb 2 13:29 ..
-rwxr-xr-x 1 root root 7240 Feb 2 13:30 Grace
-rw-r--r-- 1 root root 362 Feb 2 13:30 Grace.c
-rw-r--r-- 1 root root 362 Feb 2 13:30 Grace_kid.c
$> _
```

### 最後のプログラム

• 実行可能ファイルの名前は**Sully**でなければなりません。
• 実行すると、プログラムは**Sully_X.c/Sully_X.s**という名前のファイルに書き込みます。Xはソースで指定された整数になります。ファイルが作成されると、プログラムはこのファイルをコンパイルし、新しいプログラム（ソースファイルの名前を持つ）を実行します。
• プログラムの停止はファイル名に依存します：結果のプログラムは、整数Xが0以上の場合のみ実行されます。
• したがって、プログラムのソースに整数が存在し、プログラムの実行からソースファイルを作成するたびにデクリメントして進化する必要があります。
• 最初に5に設定される整数を除いて、ソースコードに制約はありません。

例を参照してください：

```bash
$> clang -Wall -Wextra -Werror ../Sully.c -o Sully ; ./ Sully
$> ls -al | grep Sully | wc -l
13
$> diff ../Sully.c Sully_0.c
1c1
< int i = 5;
---
> int i = 0;
$> diff Sully_3.c Sully_2.c
1c1
< int i = 3;
---
> int i = 2;
$> _
```

### 追加情報

コメントは次のようになります：

```c
$> nl comment.c
1 /*
2 This program will print its own source when run.
3 */
```

宣言されたmainのないプログラムは次のようになります：

```c
$> nl macro.c
1 #include
2 #define FT(x)int main(){ /* code */ }
[..]
5 FT(xxxxxxxx)
```

このプロジェクトでは高度なマクロの使用を強く推奨します。

**賢い人（またはそうでない人）へ...** 単にソースを読んで表示することはチート行為とみなされます。argv/argcの使用もチート行為とみなされます。

---

## 第VI章 ボーナス部分

評価中に受け入れられる唯一のボーナスは、このプロジェクトを選択した言語で完全に作り直すことです。

define/macroのない言語の場合、プログラムを自然に適応させる必要があります。

**賢い人（またはそうでない人）へ...** 単に必須のCコードを.cppファイルにコピーして異なる言語と呼ぶことは、ボーナスとしてカウントされません。

ボーナス部分は、必須部分が**完璧**な場合のみ評価されます。完璧とは、必須部分が完全に完了し、誤動作なしに動作することを意味します。すべての必須要件に合格していない場合、ボーナス部分は一切評価されません。

---

## 第VII章 提出と相互評価

通常通り、Gitリポジトリで課題を提出してください。リポジトリ内の作業のみが防御中に評価されます。フォルダとファイルの名前が正しいことを確認するために、ダブルチェックすることをためらわないでください。
